generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            String          @id @default(uuid())
  full_name          String
  username           String?         @unique
  email              String          @unique
  password           String
  time_zone          String?
  balance_coin       Int             @default(0)
  exp                Int             @default(0)
  streak_count       Int             @default(0)
  money_saved        Float           @default(0.0)
  cigarettes_avoided Int             @default(0)
  cigarettes_quota   Int[]
  relapse_quota      Int             @default(0)
  province           String?
  city               String?
  is_premium         Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now()) @updatedAt
  user_items         UserItem[]
  shop_items         ShopItem[]
  activity_logs      ActivityLog[]
  user_healths       UserHealth[]
  user_plans         UserPlan[]
  user_milestones    UserMilestone[]
}

model Item {
  item_id     String     @id @default(uuid())
  name        String
  description String
  price       Float
  img_url     String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now()) @updatedAt
  user_items  UserItem[]
  shop_items  ShopItem[]
}

model UserItem {
  user_id    String
  item_id    String
  user       User     @relation(fields: [user_id], references: [user_id])
  item       Item     @relation(fields: [item_id], references: [item_id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([user_id, item_id])
}

model ShopItem {
  user_id    String
  item_id    String
  user       User     @relation(fields: [user_id], references: [user_id])
  item       Item     @relation(fields: [item_id], references: [item_id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([user_id, item_id])
}

model ActivityLog {
  activity_log_id Int                @id @default(autoincrement())
  user_id         String
  breathing_id    Int?
  journal_id      Int?
  date            DateTime
  created_at      DateTime           @default(now())
  updated_at      DateTime           @default(now()) @updatedAt
  user            User               @relation(fields: [user_id], references: [user_id])
  breathing       BreathingActivity? @relation(fields: [breathing_id], references: [breathing_id])
  journal         JournalActivity?   @relation(fields: [journal_id], references: [journal_id])
}

model BreathingActivity {
  breathing_id  Int           @id @default(autoincrement())
  duration      Int
  reward        Float
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now()) @updatedAt
  activity_logs ActivityLog[]
}

model JournalActivity {
  journal_id    Int           @id @default(autoincrement())
  title         String
  body          String
  reward        Float
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now()) @updatedAt
  activity_logs ActivityLog[]
}

model UserHealth {
  user_id              String
  date_of_birth        DateTime
  gender               String
  smoking_start_time   Int
  is_nicotine_med      Boolean
  is_e_cigarette       Boolean
  first_cigarette_date DateTime
  is_depressed         Boolean
  is_other_tobacco     Boolean
  is_spirit            Boolean
  cigarettes_per_day   Int
  cigarettes_per_pack  Int
  pack_price           Float
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now()) @updatedAt
  user                 User     @relation(fields: [user_id], references: [user_id])

  @@id([user_id])
}

model UserPlan {
  user_id                   String
  duration                  Int
  probability               Float
  original_cigarettes_quota Int[]
  is_active                 Boolean
  created_at                DateTime @default(now())
  updated_at                DateTime @default(now()) @updatedAt
  user                      User     @relation(fields: [user_id], references: [user_id])

  @@id([user_id])
}

model UserMilestone {
  milestone_id   Int      @id @default(autoincrement())
  user_id        String
  title          String
  description    String
  target_value   Int
  achieved_value Int
  date_achieved  DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [user_id], references: [user_id])
}
